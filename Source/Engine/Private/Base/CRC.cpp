#include <Base/CRC.h>

namespace Neowise {
    constexpr uint kCRCTableSize = 256;

	static const uint32	sCRC32Table[kCRCTableSize] = {
        0x00000000, 0x0fbb28b0, 0x1f765160, 0x10cd79d0,
        0x3eeca2c0, 0x31578a70, 0x219af3a0, 0x2e21db10,
        0x7dd94580, 0x72626d30, 0x62af14e0, 0x6d143c50,
        0x4335e740, 0x4c8ecff0, 0x5c43b620, 0x53f89e90,
        0x138592af, 0x1c3eba1f, 0x0cf3c3cf, 0x0348eb7f,
        0x2d69306f, 0x22d218df, 0x321f610f, 0x3da449bf,
        0x6e5cd72f, 0x61e7ff9f, 0x712a864f, 0x7e91aeff,
        0x50b075ef, 0x5f0b5d5f, 0x4fc6248f, 0x407d0c3f,
        0x270b255e, 0x28b00dee, 0x387d743e, 0x37c65c8e,
        0x19e7879e, 0x165caf2e, 0x0691d6fe, 0x092afe4e,
        0x5ad260de, 0x5569486e, 0x45a431be, 0x4a1f190e,
        0x643ec21e, 0x6b85eaae, 0x7b48937e, 0x74f3bbce,
        0x348eb7f1, 0x3b359f41, 0x2bf8e691, 0x2443ce21,
        0x0a621531, 0x05d93d81, 0x15144451, 0x1aaf6ce1,
        0x4957f271, 0x46ecdac1, 0x5621a311, 0x599a8ba1,
        0x77bb50b1, 0x78007801, 0x68cd01d1, 0x67762961,
        0x4e164abc, 0x41ad620c, 0x51601bdc, 0x5edb336c,
        0x70fae87c, 0x7f41c0cc, 0x6f8cb91c, 0x603791ac,
        0x33cf0f3c, 0x3c74278c, 0x2cb95e5c, 0x230276ec,
        0x0d23adfc, 0x0298854c, 0x1255fc9c, 0x1deed42c,
        0x5d93d813, 0x5228f0a3, 0x42e58973, 0x4d5ea1c3,
        0x637f7ad3, 0x6cc45263, 0x7c092bb3, 0x73b20303,
        0x204a9d93, 0x2ff1b523, 0x3f3cccf3, 0x3087e443,
        0x1ea63f53, 0x111d17e3, 0x01d06e33, 0x0e6b4683,
        0x691d6fe2, 0x66a64752, 0x766b3e82, 0x79d01632,
        0x57f1cd22, 0x584ae592, 0x48879c42, 0x473cb4f2,
        0x14c42a62, 0x1b7f02d2, 0x0bb27b02, 0x040953b2,
        0x2a2888a2, 0x2593a012, 0x355ed9c2, 0x3ae5f172,
        0x7a98fd4d, 0x7523d5fd, 0x65eeac2d, 0x6a55849d,
        0x44745f8d, 0x4bcf773d, 0x5b020eed, 0x54b9265d,
        0x0741b8cd, 0x08fa907d, 0x1837e9ad, 0x178cc11d,
        0x39ad1a0d, 0x361632bd, 0x26db4b6d, 0x296063dd,
        0x741b8cd7, 0x7ba0a467, 0x6b6dddb7, 0x64d6f507,
        0x4af72e17, 0x454c06a7, 0x55817f77, 0x5a3a57c7,
        0x09c2c957, 0x0679e1e7, 0x16b49837, 0x190fb087,
        0x372e6b97, 0x38954327, 0x28583af7, 0x27e31247,
        0x679e1e78, 0x682536c8, 0x78e84f18, 0x775367a8,
        0x5972bcb8, 0x56c99408, 0x4604edd8, 0x49bfc568,
        0x1a475bf8, 0x15fc7348, 0x05310a98, 0x0a8a2228,
        0x24abf938, 0x2b10d188, 0x3bdda858, 0x346680e8,
        0x5310a989, 0x5cab8139, 0x4c66f8e9, 0x43ddd059,
        0x6dfc0b49, 0x624723f9, 0x728a5a29, 0x7d317299,
        0x2ec9ec09, 0x2172c4b9, 0x31bfbd69, 0x3e0495d9,
        0x10254ec9, 0x1f9e6679, 0x0f531fa9, 0x00e83719,
        0x40953b26, 0x4f2e1396, 0x5fe36a46, 0x505842f6,
        0x7e7999e6, 0x71c2b156, 0x610fc886, 0x6eb4e036,
        0x3d4c7ea6, 0x32f75616, 0x223a2fc6, 0x2d810776,
        0x03a0dc66, 0x0c1bf4d6, 0x1cd68d06, 0x136da5b6,
        0x3a0dc66b, 0x35b6eedb, 0x257b970b, 0x2ac0bfbb,
        0x04e164ab, 0x0b5a4c1b, 0x1b9735cb, 0x142c1d7b,
        0x47d483eb, 0x486fab5b, 0x58a2d28b, 0x5719fa3b,
        0x7938212b, 0x7683099b, 0x664e704b, 0x69f558fb,
        0x298854c4, 0x26337c74, 0x36fe05a4, 0x39452d14,
        0x1764f604, 0x18dfdeb4, 0x0812a764, 0x07a98fd4,
        0x54511144, 0x5bea39f4, 0x4b274024, 0x449c6894,
        0x6abdb384, 0x65069b34, 0x75cbe2e4, 0x7a70ca54,
        0x1d06e335, 0x12bdcb85, 0x0270b255, 0x0dcb9ae5,
        0x23ea41f5, 0x2c516945, 0x3c9c1095, 0x33273825,
        0x60dfa6b5, 0x6f648e05, 0x7fa9f7d5, 0x7012df65,
        0x5e330475, 0x51882cc5, 0x41455515, 0x4efe7da5,
        0x0e83719a, 0x0138592a, 0x11f520fa, 0x1e4e084a,
        0x306fd35a, 0x3fd4fbea, 0x2f19823a, 0x20a2aa8a,
        0x735a341a, 0x7ce11caa, 0x6c2c657a, 0x63974dca,
        0x4db696da, 0x420dbe6a, 0x52c0c7ba, 0x5d7bef0a
	};
	
	static const uint sCRC64Table[kCRCTableSize] = {
        0x0000000000000000, 0x24854997ba2f81e7, 0x490a932f745f03ce, 0x6d8fdab8ce708229,
        0x9215265ee8be079c, 0xb6906fc95291867b, 0xdb1fb5719ce10452, 0xff9afce626ce85b5,
        0x66daad56789639ab, 0x425fe4c1c2b9b84c, 0x2fd03e790cc93a65, 0x0b5577eeb6e6bb82,
        0xf4cf8b0890283e37, 0xd04ac29f2a07bfd0, 0xbdc51827e4773df9, 0x994051b05e58bc1e,
        0xcdb55aacf12c7356, 0xe930133b4b03f2b1, 0x84bfc98385737098, 0xa03a80143f5cf17f,
        0x5fa07cf2199274ca, 0x7b253565a3bdf52d, 0x16aaefdd6dcd7704, 0x322fa64ad7e2f6e3,
        0xab6ff7fa89ba4afd, 0x8feabe6d3395cb1a, 0xe26564d5fde54933, 0xc6e02d4247cac8d4,
        0x397ad1a461044d61, 0x1dff9833db2bcc86, 0x7070428b155b4eaf, 0x54f50b1caf74cf48,
        0xd99a54b24bb2d03f, 0xfd1f1d25f19d51d8, 0x9090c79d3fedd3f1, 0xb4158e0a85c25216,
        0x4b8f72eca30cd7a3, 0x6f0a3b7b19235644, 0x0285e1c3d753d46d, 0x2600a8546d7c558a,
        0xbf40f9e43324e994, 0x9bc5b073890b6873, 0xf64a6acb477bea5a, 0xd2cf235cfd546bbd,
        0x2d55dfbadb9aee08, 0x09d0962d61b56fef, 0x645f4c95afc5edc6, 0x40da050215ea6c21,
        0x142f0e1eba9ea369, 0x30aa478900b1228e, 0x5d259d31cec1a0a7, 0x79a0d4a674ee2140,
        0x863a28405220a4f5, 0xa2bf61d7e80f2512, 0xcf30bb6f267fa73b, 0xebb5f2f89c5026dc,
        0x72f5a348c2089ac2, 0x5670eadf78271b25, 0x3bff3067b657990c, 0x1f7a79f00c7818eb,
        0xe0e085162ab69d5e, 0xc465cc8190991cb9, 0xa9ea16395ee99e90, 0x8d6f5faee4c61f77,
        0xf1c4488f3e8f96ed, 0xd541011884a0170a, 0xb8cedba04ad09523, 0x9c4b9237f0ff14c4,
        0x63d16ed1d6319171, 0x475427466c1e1096, 0x2adbfdfea26e92bf, 0x0e5eb46918411358,
        0x971ee5d94619af46, 0xb39bac4efc362ea1, 0xde1476f63246ac88, 0xfa913f6188692d6f,
        0x050bc387aea7a8da, 0x218e8a101488293d, 0x4c0150a8daf8ab14, 0x6884193f60d72af3,
        0x3c711223cfa3e5bb, 0x18f45bb4758c645c, 0x757b810cbbfce675, 0x51fec89b01d36792,
        0xae64347d271de227, 0x8ae17dea9d3263c0, 0xe76ea7525342e1e9, 0xc3ebeec5e96d600e,
        0x5aabbf75b735dc10, 0x7e2ef6e20d1a5df7, 0x13a12c5ac36adfde, 0x372465cd79455e39,
        0xc8be992b5f8bdb8c, 0xec3bd0bce5a45a6b, 0x81b40a042bd4d842, 0xa531439391fb59a5,
        0x285e1c3d753d46d2, 0x0cdb55aacf12c735, 0x61548f120162451c, 0x45d1c685bb4dc4fb,
        0xba4b3a639d83414e, 0x9ece73f427acc0a9, 0xf341a94ce9dc4280, 0xd7c4e0db53f3c367,
        0x4e84b16b0dab7f79, 0x6a01f8fcb784fe9e, 0x078e224479f47cb7, 0x230b6bd3c3dbfd50,
        0xdc919735e51578e5, 0xf814dea25f3af902, 0x959b041a914a7b2b, 0xb11e4d8d2b65facc,
        0xe5eb469184113584, 0xc16e0f063e3eb463, 0xace1d5bef04e364a, 0x88649c294a61b7ad,
        0x77fe60cf6caf3218, 0x537b2958d680b3ff, 0x3ef4f3e018f031d6, 0x1a71ba77a2dfb031,
        0x8331ebc7fc870c2f, 0xa7b4a25046a88dc8, 0xca3b78e888d80fe1, 0xeebe317f32f78e06,
        0x1124cd9914390bb3, 0x35a1840eae168a54, 0x582e5eb66066087d, 0x7cab1721da49899a,
        0xa17870f5d4f51b49, 0x85fd39626eda9aae, 0xe872e3daa0aa1887, 0xccf7aa4d1a859960,
        0x336d56ab3c4b1cd5, 0x17e81f3c86649d32, 0x7a67c58448141f1b, 0x5ee28c13f23b9efc,
        0xc7a2dda3ac6322e2, 0xe3279434164ca305, 0x8ea84e8cd83c212c, 0xaa2d071b6213a0cb,
        0x55b7fbfd44dd257e, 0x7132b26afef2a499, 0x1cbd68d2308226b0, 0x383821458aada757,
        0x6ccd2a5925d9681f, 0x484863ce9ff6e9f8, 0x25c7b97651866bd1, 0x0142f0e1eba9ea36,
        0xfed80c07cd676f83, 0xda5d45907748ee64, 0xb7d29f28b9386c4d, 0x9357d6bf0317edaa,
        0x0a17870f5d4f51b4, 0x2e92ce98e760d053, 0x431d14202910527a, 0x67985db7933fd39d,
        0x9802a151b5f15628, 0xbc87e8c60fded7cf, 0xd108327ec1ae55e6, 0xf58d7be97b81d401,
        0x78e224479f47cb76, 0x5c676dd025684a91, 0x31e8b768eb18c8b8, 0x156dfeff5137495f,
        0xeaf7021977f9ccea, 0xce724b8ecdd64d0d, 0xa3fd913603a6cf24, 0x8778d8a1b9894ec3,
        0x1e388911e7d1f2dd, 0x3abdc0865dfe733a, 0x57321a3e938ef113, 0x73b753a929a170f4,
        0x8c2daf4f0f6ff541, 0xa8a8e6d8b54074a6, 0xc5273c607b30f68f, 0xe1a275f7c11f7768,
        0xb5577eeb6e6bb820, 0x91d2377cd44439c7, 0xfc5dedc41a34bbee, 0xd8d8a453a01b3a09,
        0x274258b586d5bfbc, 0x03c711223cfa3e5b, 0x6e48cb9af28abc72, 0x4acd820d48a53d95,
        0xd38dd3bd16fd818b, 0xf7089a2aacd2006c, 0x9a87409262a28245, 0xbe020905d88d03a2,
        0x4198f5e3fe438617, 0x651dbc74446c07f0, 0x089266cc8a1c85d9, 0x2c172f5b3033043e,
        0x50bc387aea7a8da4, 0x743971ed50550c43, 0x19b6ab559e258e6a, 0x3d33e2c2240a0f8d,
        0xc2a91e2402c48a38, 0xe62c57b3b8eb0bdf, 0x8ba38d0b769b89f6, 0xaf26c49cccb40811,
        0x3666952c92ecb40f, 0x12e3dcbb28c335e8, 0x7f6c0603e6b3b7c1, 0x5be94f945c9c3626,
        0xa473b3727a52b393, 0x80f6fae5c07d3274, 0xed79205d0e0db05d, 0xc9fc69cab42231ba,
        0x9d0962d61b56fef2, 0xb98c2b41a1797f15, 0xd403f1f96f09fd3c, 0xf086b86ed5267cdb,
        0x0f1c4488f3e8f96e, 0x2b990d1f49c77889, 0x4616d7a787b7faa0, 0x62939e303d987b47,
        0xfbd3cf8063c0c759, 0xdf568617d9ef46be, 0xb2d95caf179fc497, 0x965c1538adb04570,
        0x69c6e9de8b7ec0c5, 0x4d43a04931514122, 0x20cc7af1ff21c30b, 0x04493366450e42ec,
        0x89266cc8a1c85d9b, 0xada3255f1be7dc7c, 0xc02cffe7d5975e55, 0xe4a9b6706fb8dfb2,
        0x1b334a9649765a07, 0x3fb60301f359dbe0, 0x5239d9b93d2959c9, 0x76bc902e8706d82e,
        0xeffcc19ed95e6430, 0xcb7988096371e5d7, 0xa6f652b1ad0167fe, 0x82731b26172ee619,
        0x7de9e7c031e063ac, 0x596cae578bcfe24b, 0x34e374ef45bf6062, 0x10663d78ff90e185,
        0x4493366450e42ecd, 0x60167ff3eacbaf2a, 0x0d99a54b24bb2d03, 0x291cecdc9e94ace4,
        0xd686103ab85a2951, 0xf20359ad0275a8b6, 0x9f8c8315cc052a9f, 0xbb09ca82762aab78,
        0x22499b3228721766, 0x06ccd2a5925d9681, 0x6b43081d5c2d14a8, 0x4fc6418ae602954f,
        0xb05cbd6cc0cc10fa, 0x94d9f4fb7ae3911d, 0xf9562e43b4931334, 0xddd367d40ebc92d3
	};

    uint32 CRC32(const void* data, const uint size) {
        uint32 crc = {};
        auto p = reinterpret_cast<const uint8*>(data);
        auto end = p + size;
        while (p != end) {
            crc = sCRC32Table[uint8(crc) ^ (*p++)] ^ (crc >> 8);
        }
        return crc;
    }

    uint CRC64(const void* data, const uint size) {
        uint crc = {};
        auto p = reinterpret_cast<const uint8*>(data);
        auto end = p + size;
        while (p != end) {
            crc = sCRC64Table[uint8(crc) ^ (*p++)] ^ (crc >> 8);
        }
        return crc;
    }

}
